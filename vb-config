#!/usr/bin/python3
# Copyright Peter Csaszar (Császár Péter) 2021 <csjpeter@gmail.com>

import sys
if __file__ not in sys.argv[0] :
	print (__file__ + " should not be imported but executed directly")
	sys.exit(1)

import json
import time
import datetime
import subprocess
import fcntl
import os
import re
import getopt
import libvb

class Config : #{{{
	cpuNum     = 0
	cpuExecCap = 0
	ram        = 0
	netName   = None

	vmNames      = []

	action = None

	def __init__(this) : #{{{
		pass
		#}}}
#}}}

config = Config()

def printHelp() : #{{{
	print ("Usage: " + sys.argv[0] + """ <--name=vmnameprefix> <--net-name=vboxnetN> [options] <--action=XYZ>

Parameters:
	-h, --help             : shows this screen

	--name=                : Name (or prefix) for the vbox to be configured.
	--id=                  : Last number of desired IPv4 address. Will also
	                         be part of MAC to be assigned, since MAC is
				 generated by using the IP address.
	--range=               : Enumeration of numbers and/or ranges appended
	                         to the name prefix. This also will be the
				 last number of IPv4 address configured.

	--cpu-num=             : Number of CPUs to enable on the vhost.
                                 Default is 0, thus don't change the current value.
	--cpu-exec-cap=        : CPU execution cap for each CPU in the vhost.
                                 Default is 0%, thus don't change the current value.
	--ram=                 : Available RAM in the vhost.
                                 Default is 0, thus don't change the current value.

Examples:
	""" + sys.argv[0] + """ --name=node --range=1,5-7,15 --cpu-num=4

	The above will configure hosts to have 4 CPUs :
	node1, node5, node6, node7, node15

	""" + sys.argv[0] + """ --name=node --id=1 --ram=1024

	The above will configure vhost node1 to have 1024Mb RAM memory.
""")
#}}}

def parseArgs() : #{{{
	try:
		opts, args = getopt.getopt(sys.argv[1:],
				"h", [
					"help",
					"cpu-num=",
					"cpu-exec-cap=",
					"ram=",
					"name=",
					"id=",
					"range="
					])
	except getopt.GetoptError :
		printHelp()
		print("Invalid command line arguments received.")
		sys.exit(2)

	vmIdRange     = []
	vmSingleId    = None

	# commands to be executed directly
	for opt, arg in opts :
		if opt in ("-h", "--help") :
			printHelp()
			sys.exit(0)
		elif opt in ("--cpu-num") :
			config.cpuNum = int(arg)
		elif opt in ("--cpu-exec-cap") :
			config.cpuExecCap = int(arg)
		elif opt in ("--ram") :
			config.ram = int(arg)
		elif opt in ("--id") :
			vmSingleId = int(arg)
		elif opt in ("--range") :
			vmIdRange = libvb.parseRange(arg)

	config.vmNames = libvb.parseVmNames(opts)
#}}}

parseArgs()

for vmName,vmId in config.vmNames :
	if config.cpuNum != 0 :
		libvb.modifyCpuNum(vmName, config.cpuNum)
	if config.cpuExecCap != 0 :
		libvb.modifyCpuExecCap(vmName, config.cpuExecCap)
	if config.ram != 0 :
		libvb.modifyRam(vmName, config.ram)

