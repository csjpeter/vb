#!/usr/bin/python3
# Copyright Peter Csaszar (Császár Péter) 2021 <csjpeter@gmail.com>

import sys
if __file__ not in sys.argv[0] :
	print (__file__ + " should not be imported but executed directly")
	sys.exit(1)

import json
import time
import datetime
import subprocess
import fcntl
import os
import re
import getopt
import libvb

class Config : #{{{
	nicId     = 1
	macPrefix = "0E:00:"
	netName   = "vboxnet0"

	vmNames      = []

	action = None

	def __init__(this) : #{{{
		pass
		#}}}
#}}}

config = Config()

def printHelp() : #{{{
	print ("Usage: " + sys.argv[0] + """ <--name=vmnameprefix> <--net-name=vboxnetN> [options] <--action=XYZ>

Parameters:
	-h, --help             : shows this screen

	--name=                : Name (or prefix) for the vbox to be configured.
	--id=                  : Last number of desired IPv4 address. Will also
	                         be part of MAC to be assigned, since MAC is
				 generated by using the IP address.
	--range=               : Enumeration of numbers and/or ranges appended
	                         to the name prefix. This also will be the
				 last number of IPv4 address configured.

	--action=              : Choose an action to do.
				 Actions requireing --name and --id or --range :
	                         - config-nic (only hostonly)
				 - remove-nic
				 Actions requireing --id or --range :
				 - generate-isc-dhcp-config
				 - generate-hosts-file
				 - generate-iptables

	--nic-id=              : Number of NIC adapter of the vhost to
	                         configure. Default is 1.
	--mac-prefix=          : 2 byte MAC address prefix. The rest will be
	                         generated from the IP address.
				 Default is "0E:00:".
	--net-name=            : Virtualbox hostonly network/adapter name to
	                         attach to. Default is vboxnet0.

Examples:
	""" + sys.argv[0] + """ --action=config-nic --name=node --range=1,5-7,15 --net-name=vboxnet0

	The above will configure NIC on hosts :
	node1, node5, node6, node7, node15

	""" + sys.argv[0] + """ --action=config-nic --name=node --id=1 --net-name=vboxnet0

	The above will configure NIC on host node1 only.
""")
#}}}

def parseArgs() : #{{{
	try:
		opts, args = getopt.getopt(sys.argv[1:],
				"h", [
					"help",
					"nic-id=",
					"macPrefix=",
					"net-name=",
					"action=",
					"name=",
					"id=",
					"range="
					])
	except getopt.GetoptError :
		printHelp()
		print("Invalid command line arguments received.")
		sys.exit(2)

	vmIdRange     = []
	vmSingleId    = None

	# commands to be executed directly
	for opt, arg in opts :
		if opt in ("-h", "--help") :
			printHelp()
			sys.exit(0)
		elif opt in ("--nic-id") :
			config.nicId = int(arg)
		elif opt in ("--mac-prefix") :
			config.macPrefix = arg
		elif opt in ("--net-name") :
			config.netName = arg
		elif opt in ("--id") :
			vmSingleId = int(arg)
		elif opt in ("--range") :
			vmIdRange = libvb.parseRange(arg)
		elif opt in ("--action") :
			config.action = arg

	if config.netName is None :
		printHelp()
		print("A hostonly virtualbox network/adapter name "
			"(--net-name) have to be specified.")
		sys.exit(2)

	if len(vmIdRange) == 0 and vmSingleId == None:
		printHelp()
		print("Either an id or a range of values in 1 to 253 "
			"have to be specified to be able to either "
			"configure vhosts or generate configurations.")
		sys.exit(2)

	config.vmNames = libvb.parseVmNames(opts)
#}}}

parseArgs()

if config.action == "config-nic" :
	for vmName,vmId in config.vmNames :
		libvb.configNIC(vmName, vmId, config.netName, config.nicId)
elif config.action == "remove-nic" :
	for vmName,vmId in config.vmNames :
		libvb.modifyvm(vmName, "--nic%d none" % config.nicId)
elif config.action == "generate-isc-dhcp-config" :
	libvb.generateIscDhcpConfig (config.vmNames, config.netName)
elif config.action == "generate-hosts-file" :
	libvb.generateHostsFile (config.vmNames, config.netName)
elif config.action == "generate-iptables" :
	#iptables -t filter -I FORWARD -s 192.168.30.0/24 -d 192.168.1.101  -j ACCEPT
	#iptables -t nat -A POSTROUTING -o enp0s31f6 -j MASQUERADE
	pass
else :
	printHelp()
	print("No action or unknown action specified.")
	sys.exit(2)


